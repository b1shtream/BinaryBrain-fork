# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Ryuji Fuchikami
# This file is distributed under the same license as the BinaryBrain
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BinaryBrain \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-29 19:33+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/introduction.rst:3
msgid "はじめに"
msgstr "Introduction"

#: ../../source/introduction.rst:7
msgid "概要"
msgstr "Abstruct"

#: ../../source/introduction.rst:9
msgid ""
"BinaryBrain は主に当サイトが研究中の LUT(Look-Up Table)-Networkを実験することを目的に作成した "
"ディープラーニング用のプラットフォームです。"
msgstr ""
"BinaryBrain is a deep learning platform created mainly for the purpose of"
" experimenting with the LUT (Look-Up Table) -Network under study by this "
"site."

#: ../../source/introduction.rst:12
msgid "LUT-Networkの評価を目的に作成しておりますが、それ以外の用途にも利用可能です。"
msgstr ""
"It is created for the purpose of LUT-Network evaluation, but it can also "
"be used for other purposes."

#: ../../source/introduction.rst:14
msgid "以下の特徴があります"
msgstr "It has the following features"

#: ../../source/introduction.rst:16
msgid "ニューラルネットのFPGA化をメインターゲットにしている"
msgstr "The main target is FPGA(field-programmable gate array)."

#: ../../source/introduction.rst:17
#, fuzzy
msgid "バイナリネットであるも関わらず変調技術によりAutoencodeや回帰分析が可能"
msgstr ""
"Autoencode and regression analysis are possible with modulation "
"technology despite being a binary net."

#: ../../source/introduction.rst:18
msgid "独自のSparse-LUTモデルにより、LUTの性能を最大限引き出したが学習できる"
msgstr ""
"With the original Sparse-LUT model, the LUT performance can be maximized "
"and learned."

#: ../../source/introduction.rst:19
msgid "量子化＆疎行列のネットワークでパフォーマンスの良い学習が出来る環境を目指している"
msgstr ""

#: ../../source/introduction.rst:20
msgid "C++で記述されている"
msgstr "Developed in C++"

#: ../../source/introduction.rst:21
msgid "GPU(CUDA)に対応している"
msgstr "Accelerated with GPU (CUDA)"

#: ../../source/introduction.rst:22
msgid "高速でマニアックな自作レイヤーが作りやすい"
msgstr ""

#: ../../source/introduction.rst:23
msgid "Pythonからの利用も可能"
msgstr ""

#: ../../source/introduction.rst:27
msgid "クイックスタート(C++)"
msgstr ""

#: ../../source/introduction.rst:29
msgid "まずはじめに付属のMNISTサンプルを動かすまでを紹介します。"
msgstr ""

#: ../../source/introduction.rst:31
msgid ""
"AXV2以降の命令が使えるCPUと、Windows7以降もしくは Linuxの環境を想定しております。 "
"CUDAにも対応していまが、nvccが利用可能な環境でビルドする必要があります。"
msgstr ""

#: ../../source/introduction.rst:34
msgid ""
"CUDAについてはNVIDIAのページを参考に事前にインストールください。 https://developer.nvidia.com/cuda-"
"downloads"
msgstr ""

#: ../../source/introduction.rst:37
msgid "なお make 時に make WITH_CUDA=No と指定することで、GPUを使わないCPU版もビルド可能です。"
msgstr ""

#: ../../source/introduction.rst:41
msgid "Windows"
msgstr ""

#: ../../source/introduction.rst:42
msgid "install VisualStudio 2017 + CUDA 10.1"
msgstr ""

#: ../../source/introduction.rst:43
msgid ""
"git clone --recursive -b ver3_release "
"https://github.com/ryuz/BinaryBrain.git"
msgstr ""

#: ../../source/introduction.rst:44
msgid "download MNIST from http://yann.lecun.com/exdb/mnist/"
msgstr ""

#: ../../source/introduction.rst:45
msgid "decompress MNIST for \"\\samples\\mnist\""
msgstr ""

#: ../../source/introduction.rst:46
msgid "open VC++ solution \"samples\\mnist\\sample_mnist.sln\""
msgstr ""

#: ../../source/introduction.rst:47
msgid "build \"x64 Release\""
msgstr ""

#: ../../source/introduction.rst:48
msgid "run"
msgstr ""

#: ../../source/introduction.rst:51
msgid "Linux(Ubuntu 18.04.1)"
msgstr ""

#: ../../source/introduction.rst:54
msgid "install tools"
msgstr ""

#: ../../source/introduction.rst:68
msgid "2. build and run"
msgstr ""

#: ../../source/introduction.rst:80
msgid "Google Colaboratory"
msgstr ""

#: ../../source/introduction.rst:82
msgid ""
"nvcc が利用可能な Google Colaboratory でも動作可能なようです。 "
"以下あくまで参考ですが、ランタイムのタイプをGPUに設定した上で"
msgstr ""

#: ../../source/introduction.rst:92
msgid "のような操作で、ビルドして動作させることができます。"
msgstr ""

#: ../../source/introduction.rst:96
msgid "クイックスタート(Python)"
msgstr ""

#: ../../source/introduction.rst:98
msgid "BinaryBrain は pybind11 を利用して Python からの呼び出しも可能にしています。 python3を前提としています。"
msgstr ""

#: ../../source/introduction.rst:102
msgid "pipでのインストール"
msgstr ""

#: ../../source/introduction.rst:104 ../../source/introduction.rst:147
msgid "下記のコマンドでインストール可能です。"
msgstr ""

#: ../../source/introduction.rst:110
msgid ""
"Windowsなど環境によっては pip3 が存在せず、pip のみ場合は pip3 を pip に置き換えて実行ください。 "
"インストール時にソースファイルがビルドされますので、コンパイラやCUDAなどの環境は事前に整えておく必要があります。 "
"(Windows版はバイナリwheelが提供されるかもしれません)"
msgstr ""

#: ../../source/introduction.rst:114
msgid "Python用のサンプルプログラムは"
msgstr ""

#: ../../source/introduction.rst:116
msgid "https://github.com/ryuz/BinaryBrain/tree/master/python/samples"
msgstr ""

#: ../../source/introduction.rst:118
msgid "などを参照ください。"
msgstr ""

#: ../../source/introduction.rst:123
msgid "setup.py でのインストール"
msgstr ""

#: ../../source/introduction.rst:126
msgid "事前準備"
msgstr ""

#: ../../source/introduction.rst:127
msgid "必要なパッケージを事前にインストールください"
msgstr ""

#: ../../source/introduction.rst:137
msgid ""
"Windows環境の場合、nvccのほかにも VisualStudio の 64bit "
"版がコマンドラインから利用できるようにしておく必要があります。 例えば以下のように実行しておきます。 x64 の指定が重要です。"
msgstr ""

#: ../../source/introduction.rst:145
msgid "インストール"
msgstr ""

#: ../../source/introduction.rst:158
msgid "githubについて"
msgstr ""

#: ../../source/introduction.rst:160
msgid "現在 version3 は下記の branch で管理しています"
msgstr ""

#: ../../source/introduction.rst:164
msgid "ver3_develop"
msgstr ""

#: ../../source/introduction.rst:163
msgid "開発用ブランチです。ビルド不能な状態になることもあります。 最新のコードにアクセスしたい場合はここをご覧ください。"
msgstr ""

#: ../../source/introduction.rst:167
msgid "ver3_release"
msgstr ""

#: ../../source/introduction.rst:167
msgid "リリース作成用ブランチです。"
msgstr ""

#: ../../source/introduction.rst:170
msgid "master"
msgstr ""

#: ../../source/introduction.rst:170
msgid "リリースブランチで確認したものを反映。"
msgstr ""

#: ../../source/introduction.rst:172
msgid ""
"tag は 開発都合で ver3_build0001 のような形式で定期的に打っており、 "
"リリースのタイミングでバージョン番号のタグを打つようにしております。 (以前はリリースごとにver3_release1 のような形で打つように "
"していました)。"
msgstr ""

#: ../../source/introduction.rst:177
msgid "まだ、開発初期で仕様が安定していませんので、再現性の確保などが 必要な際はタグを活用ください。"
msgstr ""

#: ../../source/introduction.rst:182
msgid "基本的な使い方"
msgstr ""

#: ../../source/introduction.rst:184
msgid ""
"基本的には C++ や Python で、ネットワークを記述し、学習を行った後に その結果を verilog "
"などで出力して、FPGA化することを目的に作成しています。"
msgstr ""

#: ../../source/introduction.rst:187
msgid ""
"もちろんBinaryBrain自体は学習によってネットワークのパラメータも求めるまでが "
"主体ですので、その結果を使ってC言語を出力するルーチンをユーザー側で開発することも 自由です。"
msgstr ""

#: ../../source/introduction.rst:191
msgid ""
"C++用のCPU版に関してはヘッダオンリーライブラリとなっているため、include 以下にある "
"ヘッダファイルをインクルードするだけでご利用いただけます。 GPUを使う場合は、ヘッダ読み込みの際に BB_WITH_CUDA "
"マクロを定義した上で、cuda 以下にある ライブラリをビルドした上でリンクする必要があります。"
msgstr ""

#: ../../source/introduction.rst:196
msgid "また、BB_WITH_CEREAL マクロを定義すると、途中経過の保存形式に json が利用可能となります。"
msgstr ""

#: ../../source/introduction.rst:198
msgid "Python版を使う場合は、import するだけで利用可能です。"
msgstr ""

#: ../../source/introduction.rst:200
msgid "使い方はsampleなどを参考にしてください。"
msgstr ""

#~ msgid "また、BB_WITH_CEREAL マクロを定義すると、途中経過を json 経由で保存可能となります。"
#~ msgstr ""

#~ msgid "独自の確率的LUTのモデルにより、高速に学習できる"
#~ msgstr ""

#~ msgid "MNISTサンプルの動かし方"
#~ msgstr "How to use sample program (MNIST)"

#~ msgid "AXV2以降の命令が使えるCPUと、Windows7以降の環境を想定しております。 CUDA(Kepler以降)にも対応しています。"
#~ msgstr ""
#~ "It assumes a CPU that can use "
#~ "AXV2 or later instructions, and an "
#~ "environment of Windows 7 or later. "
#~ "CUDA (Kepler or later) is also "
#~ "supported."

#~ msgid "GPUを使わない場合は make WITH_CUDA=No として下さい。"
#~ msgstr "make WITH_CUDA=No if you don't use GPU."

#~ msgid "Python (β版)"
#~ msgstr ""

#~ msgid "サンプルの実行"
#~ msgstr ""

#~ msgid "pip によるインストール"
#~ msgstr ""

#~ msgid "いずれ下記のようにインストールできるようになるかもしれません"
#~ msgstr ""

#~ msgid "githubからの取得"
#~ msgstr ""

#~ msgid "著者の開発用。記録のためにビルド不能なものを入れることもあります。"
#~ msgstr ""

#~ msgid "リリース用。基本的な動作確認はしてからここにマージしています。"
#~ msgstr ""

#~ msgid "現在は ver3 のリリース版を反映。"
#~ msgstr ""

#~ msgid ""
#~ "CPU版に関してはヘッダオンリーライブラリとなっているため、include 以下にある "
#~ "ヘッダファイルをインクルードするだけでご利用いただけます。"
#~ msgstr ""

#~ msgid ""
#~ "GPUを使う場合は、ヘッダ読み込みの際に BB_WITH_CUDA マクロを定義した上で、cuda "
#~ "以下にある ライブラリをビルドした上でリンクする必要があります。"
#~ msgstr ""

